/*
 * Copyright 2016-2017 Hewlett Packard Enterprise Development LP
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 2, as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
+#include "../fs/mount.h"
 #include "ima_template_lib.h"
+#include <linux/types.h>
+#include <linux/backing-dev.h>
+#include <linux/device.h>
+#include <linux/security.h>
+
+#include <linux/ima.h>
+#include <avc_ss.h>
+#include "../../selinux/include/objsec.h"
 
 static bool ima_template_hash_algo_allowed(u8 algo)
 {
@@ -327,3 +336,105 @@
 out:
 	return rc;
 }
+
+/*
+ *  ima_eventdev_id_init - include the file device number as part of the template data
+ */
+int ima_eventdev_id_init(struct ima_event_data *event_data,
+			  struct ima_field_data *field_data)
+{
+	enum data_formats fmt = DATA_FMT_STRING;
+	struct inode *inode = NULL;
+	unsigned char buffer[1024];
+	int buflen;
+	int rc = 0;
+
+	if(!event_data->file){
+		goto out;
+	}
+
+	inode = file_inode(event_data->file);
+
+	buflen = snprintf(buffer, sizeof buffer, "%u:%u", MAJOR(inode->i_sb->s_dev), MINOR(inode->i_sb->s_dev));
+
+	rc = ima_write_template_field_data(buffer, buflen, fmt, field_data);
+
+out:
+	return rc;
+}
+
+/*
+ *  ima_eventsubj_init - include the file subject as part of the template data
+ */
+int ima_eventsubj_init(struct ima_event_data *event_data,
+			  struct ima_field_data *field_data)
+{
+	enum data_formats fmt = DATA_FMT_STRING;
+	struct inode *inode = NULL;
+	unsigned char buffer[1024];
+	int buflen;
+	int rc = 0;
+
+	struct inode_security_struct *isec;
+
+	char *scontext;
+	u32 scontext_len;
+	u32 ssid;
+
+	char *tcontext;
+	u32 tcontext_len;
+	u32 tsid;
+	u16 tclass;
+
+	int mask;
+
+	char resp[16] = "";
+	
+	if(!event_data->file){
+		goto out;
+	}
+
+	inode = file_inode(event_data->file);
+
+	if(!inode->i_security){
+		goto out;
+	}
+
+	isec = inode->i_security;
+
+	ssid=isec->sid;
+	tsid=isec->task_sid;
+	tclass=isec->sclass;
+
+	rc = security_sid_to_context(ssid, &scontext, &scontext_len);
+	if (rc){
+		goto out;	
+	}
+
+	rc = security_sid_to_context(tsid, &tcontext, &tcontext_len);
+	if (rc){
+		goto out;	
+	}
+
+	mask=isec->lastmask;
+
+	if (MAY_READ & mask){
+		strcat(resp, "r");
+	}
+	if (MAY_WRITE & mask){
+		strcat(resp, "w");
+	}
+	if (MAY_EXEC & mask){
+		strcat(resp, "x");
+	}
+	if (MAY_APPEND & mask){
+		strcat(resp, "a");
+	}
+
+	buflen = snprintf(buffer, sizeof buffer, "ACT=%s&SUBJ=%s&OBJ=%s", resp, tcontext, scontext);
+
+	rc = ima_write_template_field_data(buffer, buflen, fmt, field_data);
+
+out:
+	return rc;
+}
diff -u -r linux-4.6.2/security/integrity/ima/ima_template_lib.h linux/security/integrity/ima/ima_template_lib.h
--- linux-4.6.2/security/integrity/ima/ima_template_lib.h	2016-06-08 02:23:53.000000000 +0100
+++ linux/security/integrity/ima/ima_template_lib.h	2016-08-15 09:53:26.803250452 +0100
@@ -36,4 +36,8 @@
 			  struct ima_field_data *field_data);
 int ima_eventsig_init(struct ima_event_data *event_data,
 		      struct ima_field_data *field_data);
+int ima_eventdev_id_init(struct ima_event_data *event_data,
+		      struct ima_field_data *field_data);
+int ima_eventsubj_init(struct ima_event_data *event_data,
+			struct ima_field_data *field_data);
 #endif /* __LINUX_IMA_TEMPLATE_LIB_H */
diff -u -r linux-4.6.2/security/integrity/ima/Kconfig linux/security/integrity/ima/Kconfig
--- linux-4.6.2/security/integrity/ima/Kconfig	2016-06-08 02:23:53.000000000 +0100
+++ linux/security/integrity/ima/Kconfig	2016-08-15 09:53:26.803250452 +0100
@@ -63,6 +63,10 @@
 		bool "ima-ng (default)"
 	config IMA_SIG_TEMPLATE
 		bool "ima-sig"
+	config IMA_CONT_ID_TEMPLATE
+		bool "ima-cont-id"
+	config IMA_CONT_ID_SUBJ_TEMPLATE
+		bool "ima-cont-id-subj"
 endchoice
 
 config IMA_DEFAULT_TEMPLATE
@@ -71,6 +75,8 @@
 	default "ima" if IMA_TEMPLATE
 	default "ima-ng" if IMA_NG_TEMPLATE
 	default "ima-sig" if IMA_SIG_TEMPLATE
+	default "ima-cont-id" if IMA_CONT_ID_TEMPLATE
+	default "ima-cont-id-subj" if IMA_CONT_ID_SUBJ_TEMPLATE
 
 choice
 	prompt "Default integrity hash algorithm"
diff -u -r linux-4.6.2/security/integrity/ima/Makefile linux/security/integrity/ima/Makefile
--- linux-4.6.2/security/integrity/ima/Makefile	2016-06-08 02:23:53.000000000 +0100
+++ linux/security/integrity/ima/Makefile	2016-08-15 09:57:17.423258382 +0100
@@ -3,9 +3,27 @@
 # Measurement Architecture(IMA).
 #
 
+ifneq ($(CONFIG_IMA),n)
+ifeq ($(.DEFAULT_GOAL),__build)
+
+.DEFAULT_GOAL=__mybuild
+
+__mybuild: __myprecon __build
+
+__myprecon:
+	echo "***Compiling SELINUX"
+	cd $(srctree) && $(MAKE) M=security/selinux
+
+.PHONY: __mybuild __myprecon
+endif
+endif
+
 obj-$(CONFIG_IMA) += ima.o
 
 ima-y := ima_fs.o ima_queue.o ima_init.o ima_main.o ima_crypto.o ima_api.o \
 	 ima_policy.o ima_template.o ima_template_lib.o
 ima-$(CONFIG_IMA_APPRAISE) += ima_appraise.o
 obj-$(CONFIG_IMA_MOK_KEYRING) += ima_mok.o
+
+ccflags-y := -I$(srctree)/security/selinux -I$(srctree)/security/selinux/include
+
diff -u -r linux-4.6.2/security/selinux/include/objsec.h linux/security/selinux/include/objsec.h
--- linux-4.6.2/security/selinux/include/objsec.h	2016-06-08 02:23:53.000000000 +0100
+++ linux/security/selinux/include/objsec.h	2016-08-15 09:53:26.803250452 +0100
@@ -54,6 +54,7 @@
 	u16 sclass;		/* security class of this object */
 	unsigned char initialized;	/* initialization flag */
 	struct mutex lock;
+	int lastmask;		/* Last action mask associated with this inode */
 };
 
 struct file_security_struct {
